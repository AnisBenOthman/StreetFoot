# Stage 1: Build the Angular application
# We use a Node.js image because Angular CLI (which handles the build) runs on Node.js.
FROM node:18-alpine AS builder

# Set the working directory inside the container.
# All subsequent commands in this stage will run relative to this directory.
WORKDIR /app

# Copy package.json and package-lock.json first.
# This is a Docker caching optimization: if only your source code changes,
# but your dependencies (listed in package.json) do not, Docker can
# reuse the cached `npm install` layer, making builds much faster.
COPY package.json package-lock.json ./

# Install project dependencies.
# `npm ci` is often preferred in CI/CD environments over `npm install`
# because it uses package-lock.json to ensure exact dependency versions.
# ci stands for "clean install", which means it removes the node_modules directory
RUN npm ci

# Copy the rest of your Angular application source code into the container.
# This includes all your Angular components, services, templates, etc.
COPY . .

# Build the Angular application for production.
# `ng build` is the Angular CLI command that compiles, optimizes,
# and bundles your application into static HTML, CSS, and JavaScript files.
# `--configuration=production` ensures that it uses production-level optimizations.
# `--output-path=./dist/your-app-name` specifies where the built files will be.
# The default output path is typically `dist/<project-name>`, so adjust if needed.
RUN npm run build --configuration=production

# --- End of Stage 1 (Builder) ---

# Stage 2: Serve the compiled Angular application with Nginx
# Nginx is a very lightweight and high-performance web server,
# perfect for serving static files like a compiled Angular app.
FROM nginx:alpine

# Copy the default Nginx configuration file.
# We're replacing it with a custom one that tells Nginx to serve our Angular app correctly.
# The `default.conf` file (which you would create alongside your Dockerfile)
# typically contains settings like `try_files $uri $uri/ /index.html;` to handle Angular's routing.
COPY nginx.conf /etc/nginx/conf.d/default.conf

# Copy the built Angular assets from the 'builder' stage into Nginx's serving directory.
# `dist/your-app-name` is the path inside the 'builder' stage where `ng build` placed the files.
# `/usr/share/nginx/html` is the default directory where Nginx looks for web files.
# Make sure 'your-app-name' matches the output path from your `ng build` command.
COPY --from=builder /app/dist/street-league /usr/share/nginx/html

# Expose port 80. This tells Docker that the container will listen for
# incoming network connections on port 80 (the standard HTTP port).
EXPOSE 80

# Command to start Nginx.
# `nginx -g 'daemon off;'` runs Nginx in the foreground, which is necessary
# for Docker containers to stay running (if the main process exits, the container stops).
CMD ["nginx", "-g", "daemon off;"]