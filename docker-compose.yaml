version: '3.8'

services:
  kafka:
    image: bitnami/kafka:3.7
    ports:
      - "9092:9092"
      - "9093:9093"
      - "9094:9094"
    environment:
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,EXTERNAL://localhost:9094
      - KAFKA_CFG_BROKER_ID=1
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - KAFKA_CFG_NUM_PARTITIONS=3
      - KAFKA_CFG_DEFAULT_REPLICATION_FACTOR=1
      - KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=1
      - KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR=1
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
    volumes:
      - kafka_data:/bitnami/kafka
    networks:
      - street-foot-network

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    ports:
      - "8080:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
    depends_on:
      - kafka
    networks:
      - street-foot-network

  tournament-service:
    image: anisbenothman/tournament-service:latest
    container_name: tournament-service
    ports:
      - "8082:8082"
    environment:
      SPRING_APPLICATION_NAME: tournament-service
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discover-service:8761/eureka/
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql-db:3306/tournament-service?createDatabaseIfNotExist=true&useSSL=false&serverTimezone=UTC&allowPublicKeyRetrieval=true
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: root
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT: org.hibernate.dialect.MySQL8Dialect
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      SPRING_KAFKA_CONSUMER_GROUP_ID: tournament-service-group
      SPRING_KAFKA_CONSUMER_AUTO_OFFSET_RESET: earliest

    depends_on:
      - mysql-db
      - discover-service
    networks:
      - street-foot-network
    restart: unless-stopped

  discover-service:
      image: anisbenothman/discover-service:latest
      container_name: discover-service
      ports:
        - "8761:8761"
      networks:
        - street-foot-network

  gateway-service:
      image: anisbenothman/gateway:latest
      container_name: gateway-service
      environment:
        spring.application.name: "gateway-service"
        eureka.client.serviceUrl.defaultZone: "http://discover-service:8761/eureka/"
        spring.cloud.gateway.discovery.locator.enabled: "true"
        spring.cloud.gateway.discovery.locator.lower-case-service-id: "true"
      ports:
        - "8084:8084"
      networks:
        - street-foot-network
      depends_on:
        - discover-service
      restart: unless-stopped

  mysql-db:
      image: mysql:8.0
      container_name: mysql-db
      environment:
        MYSQL_ROOT_PASSWORD: root
        MYSQL_DATABASE: tournament-service
      ports:
        - "3306:3306"
      networks:
        - street-foot-network
      volumes:
        - mysql-data:/var/lib/mysql
      healthcheck:
        test: [ "CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-proot" ]
        interval: 10s
        timeout: 5s
        retries: 5
        start_period: 30s

  scheduling-service:
        image: anisbenothman/scheduling-service:latest
        container_name: scheduling-service
        ports:
          - "8083:8083"
        environment:
          eureka.client.serviceUrl.defaultZone: "http://discover-service:8761/eureka/"
          SPRING.DATA.MONGODB.URI: "mongodb://mongodb:27017/scheduling-service"
          spring.data.mongodb.database: "scheduling-service"
          SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
          SPRING_KAFKA_CONSUMER_GROUP_ID: scheduling-service-group
          SPRING_KAFKA_CONSUMER_AUTO_OFFSET_RESET: earliest

        depends_on:
          - mongodb
          - discover-service
          - gateway-service
        networks:
          - street-foot-network

  standing-service:
    image: anisbenothman/standing-service:latest
    container_name: standing-service
    ports:
      - "8085:8085"
    environment:
      eureka.client.serviceUrl.defaultZone: "http://discover-service:8761/eureka/"
      SPRING.DATA.MONGODB.URI: "mongodb://mongodb:27017/standing-service"
      spring.data.mongodb.database: "standing-service"
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      SPRING_KAFKA_CONSUMER_GROUP_ID: standing-service-group
      SPRING_KAFKA_CONSUMER_AUTO_OFFSET_RESET: earliest

    depends_on:
      - mongodb
      - discover-service
      - gateway-service
    networks:
      - street-foot-network
  mongodb:
          image: mongo:latest
          container_name: mongodb
          ports:
            - "27017:27017"
          networks:
            - street-foot-network
          volumes:
            - mongo-data:/data/db




volumes:
  kafka_data:
    driver: local
  mysql-data:
    driver: local
  mongo-data:
    driver: local

networks:
  street-foot-network:
    driver: bridge
    external: true