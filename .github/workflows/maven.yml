name: CI - Tournament Service

on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]

jobs:
  tournament-service:
    name: tournament-service Build & Test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"
          cache: maven

      - name: Build and install shared-library
        run: |
          cd shared-library
          mvn clean install
      - run: echo "shared library build successfully."
      - name: Compile
        run: mvn -f tournament-service/pom.xml clean compile -DskipTests

      - name: Build with Maven
        run: |
          mvn -B package --file tournament-service/pom.xml -DskipTests

      - name: SonarCloud analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN_TOURNAMENT }}
        run: |
          mvn -f tournament-service/pom.xml -DskipTests \
          verify sonar:sonar \
          -Dsonar.projectKey=anisbenothman_StreetFoot_tournament-service \
          -Dsonar.login=${{ secrets.SONAR_TOKEN_TOURNAMENT }}

      - name: Set up Maven settings.xml
        run: |
          mkdir -p ~/.m2
          cat > ~/.m2/settings.xml << EOF
          <settings>
            <servers>
              <server>
                <id>deploymentRepo</id>
                <username>${{ secrets.NEXUS_USERNAME }}</username>
                <password>${{ secrets.NEXUS_PASSWORD }}</password>
              </server>
            </servers>
          </settings>
          EOF

      - name: Build and deploy
        run: |
          mvn -f tournament-service/pom.xml clean deploy \
          -DskipTests \
          -DaltDeploymentRepository=deploymentRepo::default::${{ secrets.NEXUS_URL }}/repository/maven-snapshots

      - name: build docker image
        run: |
          cd tournament-service
          docker build -t anisbenothman/tournament-service:latest .
          echo "Docker image built successfully."

      - name: login to dockerhub
        run: |
          echo "Logging in to Docker Hub..."
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_TOKEN }}
          echo "Logged in successfully."

      - name: deploy to dockerhub
        run: |
          docker tag anisbenothman/tournament-service:latest anisbenothman/tournament-service:latest
          docker push anisbenothman/tournament-service:latest
          echo "Docker image pushed to Docker Hub successfully."
