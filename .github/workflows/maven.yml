name: CI - backend Microservice

on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]

jobs:
  tournament-service:
    name: tournament-service Build & Test
    needs: [discover-service, gateway]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"
          cache: maven

      - name: Build and install shared-library
        run: |
          cd shared-library
          mvn clean install
      - run: echo "shared library build successfully."
      - name: Compile
        run: mvn -f tournament-service/pom.xml clean compile -DskipTests

      - name: Build with Maven
        run: |
          mvn -B package --file tournament-service/pom.xml -DskipTests

      - name: SonarCloud analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN_TOURNAMENT }}
        run: |
          mvn -f tournament-service/pom.xml -DskipTests \
          verify sonar:sonar \
          -Dsonar.projectKey=anisbenothman_StreetFoot_tournament-service \
          -Dsonar.login=${{ secrets.SONAR_TOKEN_TOURNAMENT }}

      - name: Set up Maven settings.xml
        run: |
          mkdir -p ~/.m2
          cat > ~/.m2/settings.xml << EOF
          <settings>
            <servers>
              <server>
                <id>deploymentRepo</id>
                <username>${{ secrets.NEXUS_USERNAME }}</username>
                <password>${{ secrets.NEXUS_PASSWORD }}</password>
              </server>
            </servers>
          </settings>
          EOF

      - name: Build and deploy
        run: |
          mvn -f tournament-service/pom.xml clean deploy \
          -DskipTests \
          -DaltDeploymentRepository=deploymentRepo::default::${{ secrets.NEXUS_URL }}/repository/maven-snapshots

      - name: build docker image
        run: |
          cd tournament-service
          docker build -t anisbenothman/tournament-service:latest .
          echo "Docker image built successfully."

      - name: login to dockerhub
        run: |
          echo "Logging in to Docker Hub..."
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_TOKEN }}
          echo "Logged in successfully."

      - name: deploy to dockerhub
        run: |
          docker tag anisbenothman/tournament-service:latest anisbenothman/tournament-service:latest
          docker push anisbenothman/tournament-service:latest
          echo "Docker image pushed to Docker Hub successfully."

      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose
          echo "Docker Compose installed successfully."

      - name: docker-compose up
        run: |
          docker-compose -f docker-compose.yaml up -d
          cd tournament-service
          docker-compose -f docker-compose.yaml up -d
          echo "Docker Compose services started successfully."
      - name: wait for services
        run: |
          echo "Waiting for services to start..."
          sleep 30
          echo "Services are up and running."
      - name: test with curl
        run: curl -v http://localhost:8084/tournament-service/tournament/getall

  scheduling-service:
    name: scheduling-service Build & Test
    needs: [discover-service, gateway]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"
          cache: maven

      - name: Build and install shared-library
        run: |
          cd shared-library
          mvn clean install
      - run: echo "shared library build successfully."
      - name: Compile
        run: mvn -f SchedulingService/pom.xml clean compile -DskipTests

      - name: Build with Maven
        run: |
          mvn -B package --file SchedulingService/pom.xml -DskipTests

      - name: SonarCloud analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN_SCHEDULING }}
        run: |
          mvn -f SchedulingService/pom.xml -DskipTests \
          verify sonar:sonar \
          -Dsonar.projectKey=anisbenothman_StreetFoot_scheduling-service \
          -Dsonar.login=${{ secrets.SONAR_TOKEN_SCHEDULING }}

      - name: Set up Maven settings.xml
        run: |
          mkdir -p ~/.m2
          cat > ~/.m2/settings.xml << EOF
          <settings>
            <servers>
              <server>
                <id>deploymentRepo</id>
                <username>${{ secrets.NEXUS_USERNAME }}</username>
                <password>${{ secrets.NEXUS_PASSWORD }}</password>
              </server>
            </servers>
          </settings>
          EOF

      - name: Build and deploy
        run: |
          mvn -f SchedulingService/pom.xml clean deploy \
          -DskipTests \
          -DaltDeploymentRepository=deploymentRepo::default::${{ secrets.NEXUS_URL }}/repository/maven-snapshots

      - name: build docker image
        run: |
          cd SchedulingService
          docker build -t anisbenothman/scheduling-service:latest .
          echo "Docker image built successfully."

      - name: login to dockerhub
        run: |
          echo "Logging in to Docker Hub..."
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_TOKEN }}
          echo "Logged in successfully."

      - name: deploy to dockerhub
        run: |
          docker tag anisbenothman/scheduling-service:latest anisbenothman/scheduling-service:latest
          docker push anisbenothman/scheduling-service:latest
          echo "Docker image pushed to Docker Hub successfully."

      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose
          echo "Docker Compose installed successfully."

      - name: docker-compose up
        run: |
          cd SchedulingService
          docker-compose -f docker-compose.yaml up -d
          echo "Docker Compose services started successfully."
      - name: wait for services
        run: |
          echo "Waiting for services to start..."
          sleep 30
          echo "Services are up and running."
      - name: test with curl
        run: curl -v http://localhost:8084/scheduling-service/match-schedules/getallmatch

  standing-service:
    name: standing-service Build & Test
    needs: [discover-service, gateway]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"
          cache: maven

      - name: Build and install shared-library
        run: |
          cd shared-library
          mvn clean install
      - run: echo "shared library build successfully."
      - name: Compile
        run: mvn -f StandingService/pom.xml clean compile -DskipTests

      - name: Build with Maven
        run: |
          mvn -B package --file StandingService/pom.xml -DskipTests

      - name: SonarCloud analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN_STANDING }}
        run: |
          mvn -f StandingService/pom.xml -DskipTests \
          verify sonar:sonar \
          -Dsonar.projectKey=anisbenothman_StreetFoot_standing-service \
          -Dsonar.login=${{ secrets.SONAR_TOKEN_STANDING }}

      - name: Set up Maven settings.xml
        run: |
          mkdir -p ~/.m2
          cat > ~/.m2/settings.xml << EOF
          <settings>
            <servers>
              <server>
                <id>deploymentRepo</id>
                <username>${{ secrets.NEXUS_USERNAME }}</username>
                <password>${{ secrets.NEXUS_PASSWORD }}</password>
              </server>
            </servers>
          </settings>
          EOF

      - name: Build and deploy
        run: |
          mvn -f StandingService/pom.xml clean deploy \
          -DskipTests \
          -DaltDeploymentRepository=deploymentRepo::default::${{ secrets.NEXUS_URL }}/repository/maven-snapshots
          echo "Standing Service deployed successfully."

      - name: build docker image
        run: |
          cd StandingService
          docker build -t anisbenothman/standing-service:latest .
          echo "Docker image built successfully."

      - name: login to dockerhub
        run: |
          echo "Logging in to Docker Hub..."
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_TOKEN }}
          echo "Logged in successfully."

      - name: deploy to dockerhub
        run: |
          docker tag anisbenothman/standing-service:latest anisbenothman/standing-service:latest
          docker push anisbenothman/standing-service:latest
          echo "Docker image pushed to Docker Hub successfully."

      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose
          echo "Docker Compose installed successfully."

      - name: docker-compose up
        run: |
          cd StandingService
          docker-compose -f docker-compose.yaml up -d
          echo "Docker Compose services started successfully."
      - name: wait for services
        run: |
          echo "Waiting for services to start..."
          sleep 30
          echo "Services are up and running."
      - name: test with curl
        run: curl -v http://localhost:8084/standing-service/standings/getallstandings

  discover-service:
    name: discover-service Build & Test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"
          cache: maven

      - name: Build and install shared-library
        run: |
          cd shared-library
          mvn clean install
      - run: echo "shared library build successfully."
      - name: Compile
        run: mvn -f DiscoverService/pom.xml clean compile -DskipTests

      - name: Build with Maven
        run: |
          mvn -B package --file DiscoverService/pom.xml -DskipTests

      - name: Set up Maven settings.xml
        run: |
          mkdir -p ~/.m2
          cat > ~/.m2/settings.xml << EOF
          <settings>
            <servers>
              <server>
                <id>deploymentRepo</id>
                <username>${{ secrets.NEXUS_USERNAME }}</username>
                <password>${{ secrets.NEXUS_PASSWORD }}</password>
              </server>
            </servers>
          </settings>
          EOF

      - name: Build and deploy
        run: |
          mvn -f DiscoverService/pom.xml clean deploy \
          -DskipTests \
          -DaltDeploymentRepository=deploymentRepo::default::${{ secrets.NEXUS_URL }}/repository/maven-snapshots
          echo "Discover Service deployed successfully."

      - name: build docker image
        run: |
          cd DiscoverService
          docker build -t anisbenothman/discover-service:latest .
          echo "Docker image built successfully."

      - name: login to dockerhub
        run: |
          echo "Logging in to Docker Hub..."
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_TOKEN }}
          echo "Logged in successfully."

      - name: deploy to dockerhub
        run: |
          docker tag anisbenothman/discover-service:latest anisbenothman/discover-service:latest
          docker push anisbenothman/discover-service:latest
          echo "Docker image pushed to Docker Hub successfully."

  gateway:
    name: gateway Build & Test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"
          cache: maven

      - name: Build and install shared-library
        run: |
          cd shared-library
          mvn clean install
      - run: echo "shared library build successfully."
      - name: Compile
        run: mvn -f Gateway/pom.xml clean compile -DskipTests

      - name: Build with Maven
        run: |
          mvn -B package --file Gateway/pom.xml -DskipTests

      - name: Set up Maven settings.xml
        run: |
          mkdir -p ~/.m2
          cat > ~/.m2/settings.xml << EOF
          <settings>
            <servers>
              <server>
                <id>deploymentRepo</id>
                <username>${{ secrets.NEXUS_USERNAME }}</username>
                <password>${{ secrets.NEXUS_PASSWORD }}</password>
              </server>
            </servers>
          </settings>
          EOF

      - name: Build and deploy
        run: |
          mvn -f Gateway/pom.xml clean deploy \
          -DskipTests \
          -DaltDeploymentRepository=deploymentRepo::default::${{ secrets.NEXUS_URL }}/repository/maven-snapshots
          echo "Gateway Service deployed successfully."

      - name: build docker image
        run: |
          cd Gateway
          docker build -t anisbenothman/gateway:latest .
          echo "Docker image built successfully."

      - name: login to dockerhub
        run: |
          echo "Logging in to Docker Hub..."
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_TOKEN }}
          echo "Logged in successfully."

      - name: deploy to dockerhub
        run: |
          docker tag anisbenothman/gateway:latest anisbenothman/gateway:latest
          docker push anisbenothman/gateway:latest
          echo "Docker image pushed to Docker Hub successfully."

  integration-tests:
    name: integration All services & Test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"
          cache: maven
      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          echo "SSH key set up successfully."

      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose
          echo "Docker Compose installed successfully."

      - name: Copy docker-compose.yaml to EC2
        run: |
          scp -i ~/.ssh/id_rsa docker-compose.yaml ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/home/${{ secrets.EC2_USER }}/docker-compose.yaml

      - name: Run docker-compose on EC2
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            docker-compose -f docker-compose.yaml pull
            docker-compose -f docker-compose.yaml up -d --remove-orphans
            docker-compose -f docker-compose.yaml ps
          EOF
